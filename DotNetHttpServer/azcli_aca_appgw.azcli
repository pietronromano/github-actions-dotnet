#######################################################

# DATES: 27-August-2025
# SOURCE: 
- My own ACA-APPGW example, publishing a demo aspnet app to ACA, then putting it behind an AppGW
- Dockerfile from https://github.com/Azure-Samples/containerapps-albumapi-csharp/blob/main/src/Dockerfile

# RESULTS: ACA worked fine, but had difficulties with AppGW... 
  - BUT then worked for External ACA Env
  - DIDN'T WORK FOR INTERNAL ACA Env: (+ internal DNS, private link)
    - got Received invalid status code: 404 in the backend serverâ€™s HTTP response.
    - TODO... 

  - AppGW:
    - Listener: refers just to Front End: 
      - HTTP: Can simply use HTTP (80): URL is just <appgw_ip>/<query>
      - HTTPS:  requires a Certificate: Can use a self-signed cert, but that shows warnings (in Edge, Curl, Postman)
        - SEE: - https://learn.microsoft.com/en-us/azure/application-gateway/self-signed-certificates
      - A Listener can only have ONE Rule and vice Versa: 
        - So if we have 2 listeners, we need 2 rules
        - They can both have the same Backend Targets
    
    - Rule: links the Front End Listener to target Backend Pool and HTTP Settings
      - Backend Pool: <aca_fqdn>: works independent of Front End Listener
      - Backend Settings: can be HTTP OR HTTPS for ACA:
        - "By default, HTTP requests to port 80 are automatically redirected to HTTPS on 443"
        - SEE: https://learn.microsoft.com/en-gb/azure/container-apps/ingress-overview

  - References
    - ACA with AppGW:   https://learn.microsoft.com/en-us/azure/container-apps/waf-app-gateway?tabs=default-domain
    - https://learn.microsoft.com/en-us/azure/application-gateway/create-ssl-portal
    - https://learn.microsoft.com/en-us/azure/container-apps/custom-domains-certificates?tabs=general&pivots=azure-portal

# TODO: Try scaling ACA
   - https://learn.microsoft.com/en-gb/azure/container-apps/tutorial-scaling?tabs=bash#send-requests
   seq 1 50 | xargs -Iname -P10 curl "<YOUR_CONTAINER_APP_FQDN>"

###################################################################

# My Azure Variables
rg="rg-aca"
location="northeurope"
acr=pnraca
app=DotNetHttpServer
tag=v1
acr_repo=$acr.azurecr.io/$app:$tag
target_port=8080
aca_env="aca-env"
vnet="vnet-aca"
subnet_aca="subnet-aca"
dns_link="link-to-vnet"

subnet_test="subnet-test"
vm="vm_test"
vm_username="pietronromano"
vm_pwd="Axml-xsl0123"

subnet_pep="subnet-private-link"

appgw="appgateway-01"
subnet_appgw="subnet_appgw"
pip_appgw="pip-appgateway"
appgw_backend="backend-pool-aca"
appgw_pathmap="pathmap-backend"
appgw_routing_rule="rule-pathmap-to-backend"


###################################################################

# Docker
container="DotNetHttpServer"
image=$container"-image"

## build: --platform linux/x86_64 ... : force emulation when building on Mac
docker image build --platform linux/x86_64 -t $image -f Dockerfile .

## run: -p <hostport>:<containerport>:
docker container list 
docker container run  --name $container -it -p 80:8080 $image
docker container rm -f $container

## logs: follow logs as they're output
docker container logs -f $container


## test on the hostport
http://localhost:80/health
http://localhost:80/environment
http://localhost:80/variables
http://localhost:80/request

###################################################################

# Azure Container Registry 

## Create Resource Group
az group create --name $rg --location $location

## Create Container Registry
az acr create -n $acr -g $rg --admin-enabled true --sku Standard

az acr check-health --name $acr

## Tag locally, then push to ACR as repo
docker tag $image $acr_repo
az acr login -n $acr -g $rg
docker push $acr_repo
az acr repository list -n $acr  -o table

az acr repository show-tags -n $acr --repository $app -o table

###################################################################

# Container Apps Environment
    - Create with own vnet: SEE https://learn.microsoft.com/en-us/azure/container-apps/vnet-custom?tabs=bash&pivots=azure-cli

## CLI extensions, provider register
az extension add --name containerapp --upgrade --allow-preview true
az provider register --namespace Microsoft.App
az provider register --namespace Microsoft.OperationalInsights
az provider register --namespace Microsoft.ContainerService
    
## Create the VNet and Subnet
az network vnet create \
    --resource-group $rg \
    --name $vnet \
    --location $location \
    --address-prefix 10.0.0.0/16
         
az network vnet subnet create \
    --resource-group $rg \
    --vnet-name $vnet \
    --name $subnet_aca \
    --address-prefixes 10.0.1.0/24 \
    --delegations Microsoft.App/environments
        
subnet_aca_id=$(az network vnet subnet show \
    --resource-group $rg \
    --vnet-name $vnet \
    --name $subnet_aca \
    --query "id" -o tsv | tr -d '[:space:]')

echo $subnet_aca_id
    
## Create ContainerApps Env: 
- internal-only false: allows access from anywhere (instead of just vnet)
- internal-only true: just vnet access, but can still use debug console to curl
az containerapp env create \
    --name $aca_env \
    --resource-group $rg \
    --location $location \
    --infrastructure-subnet-resource-id $subnet_aca_id \
    --internal-only true

##   Create the Container App
- SEE: https://learn.microsoft.com/en-us/azure/container-apps/get-started?tabs=bash

### Get the ACR login credentials
acr_username=$(az acr credential show -n $acr -g $rg --query username --output tsv)
echo $acr_username

acr_pwd=$(az acr credential show -n $acr -g $rg --query 'passwords[0].value' --output tsv)
echo $acr_pwd

### Create the Container App
- ingress external: allows acces from VNET, internal only allows access from within the Environment
az containerapp up \
  --name $app \
  --resource-group $rg \
  --location $location \
  --environment $aca_env \
  --image $acr.azurecr.io/$app:$tag \
  --registry-server $acr.azurecr.io \
  --registry-username $acr_username \
  --registry-password $acr_pwd \
  --target-port $target_port \
  --ingress external \
  --query properties.configuration.ingress.fqdn

### The up command returns the fully qualified domain name for the container app
- NOTE: the container app can be accessed via http OR https://<>, (HTTP get redirected to HTTPS)
- Use the URL WITHOUT THE TARGET PORT (which is for the internal container port)

### Stream Logs
az containerapp logs show -n $app -g $rg

### See full details
az containerapp show -n $app -g $rg

### Get the fqdn and curl
aca_fqdn=$(az containerapp show -n $app -g $rg \
    --query 'properties.configuration.ingress.fqdn' \
    --output tsv)

curl "https://"$aca_fqdn"/request"

## Container Apps Console / Debug: allows connecting to live console
 - NOTE: Can do this also from the "Console" item in the Portal, both for Console and Debug
 - CONSOLE: https://learn.microsoft.com/en-us/azure/container-apps/container-console?tabs=bash
   - Debian image (from dotnet)
 - DEBUG: https://learn.microsoft.com/en-us/azure/container-apps/container-debug-console?tabs=bash
   - separate container, utils installed, "Common Base Linux Mariner"

az containerapp revision list \
  --name $app \
  --resource-group $rg \
  --query "[].name"

az containerapp replica list \
  --name $app \
  --resource-group $rg \
  --revision $app"--0000002" \
  --query "[].{Containers:properties.containers[].name, Name:name}"

#### DEBUG in a separate container, with the most recent revision
az containerapp debug \
  --name $app \
  --resource-group $rg

#### Connect to the actual container, most recent revision
az containerapp exec \
  --name $app \
  --resource-group $rg

### Once inside the container: see app contents in this dir:
cd /proc/1/cwd/ 

### Check dotnet info/  runtime versions (only installed on Console)
dotnet --info
dotnet --list-runtimes

### see proceses: (only installed on debug container) 
ps

### curl: (only installed on debug container)
- NOTE: get the container IP from the results returned from a call to <fqdn>/request
curl 100.100.200.146:8080/request 

###################################################################

# Add Private DNS Zone and Application Gateway
- SEE https://learn.microsoft.com/en-us/azure/container-apps/waf-app-gateway?tabs=default-domain
- I created the CLI commands

## List all private zones in the subscription (NOTE these show separately in the portal from Public DNS zones)
az network private-dns zone list -g $rg --query "[].{ResourceGroup:resourceGroup, Zone:name}" -o table

## Get the defaultdomain of the ACA Environment, we'll use it to name the zone
- NOTE: need --output tsv, otherwise returns "" in the value, so not valid as domain name
defaultDomain=$(az containerapp env show \
    --name $aca_env \
    --resource-group $rg \
    --query properties.defaultDomain \
    --output tsv)
echo $defaultDomain

## Get the staticIP of the ACA Environment, we'll use it as A records
staticIp=$(az containerapp env show \
    --name $aca_env \
    --resource-group $rg \
    --query properties.staticIp \
    --output tsv)
echo $staticIp

## Create Zone
az network private-dns zone create \
  -g $rg \
  -n $defaultDomain

### Create A Record
az network private-dns record-set a add-record \
  -g $rg \
  -z $defaultDomain \
  -n "*" \
  -a $staticIp

## NOTE: even though uses record-set "a": creates a SOA Record (Start of Authority Record) 
az network private-dns record-set a add-record \
  -g $rg \
  -z $defaultDomain \
  -n "@" \
  -a $staticIp

## Link zone to VNet (-e == --registration-enabled)
az network private-dns link vnet create \
    -g $rg \
    -n $dns_link \
    -z $defaultDomain \
    -v $vnet \
    -e false

#######################################################

# App Gateway
## Create subnet
az network vnet subnet create \
    --resource-group $rg \
    --vnet-name $vnet \
    --name $subnet_appgw \
    --address-prefixes 10.0.2.0/24

# AppGW pip
az network public-ip create \
  --resource-group $rg \
  --location $location \
  --name $pip_appgw \
  --allocation-method Static \
  --sku Standard

# Creates a default, empty appGatewayBackendPool, default appGatewayHttpListener, appGatewayBackendHttpSettings
az network application-gateway create \
  --name $appgw \
  --location $location \
  --resource-group $rg \
  --vnet-name $vnet \
  --subnet $subnet_appgw \
  --capacity 1 \
  --sku Standard_v2 \
  --http-settings-cookie-based-affinity Disabled \
  --frontend-port 80 \
  --http-settings-port 80 \
  --http-settings-protocol Http \
  --public-ip-address $pip_appgw \
  --priority 1

# Add new backend pool, linked to defaultDomain as server , but no rules yet
az network application-gateway address-pool create \
  --gateway-name $appgw \
  --resource-group $rg \
  --name $appgw_backend \
  --servers $defaultDomain


# NOTE: 
- We need to update this default rule to point to our backend, because it's associated to appGatewayHttpListener
- Two Request Routing Rules of Application Gateway can't use the same listener
az network application-gateway rule update \
    --gateway-name $appgw \
    --name "rule1" \
    --resource-group $rg \
    --address-pool $appgw_backend \
    --priority 200


# AppGW public ip
pip_appgw_ip=$(az network public-ip show \
  --resource-group $rg \
  --name $pip_appgw \
  --query ipAddress \
  --output tsv)


curl $pip_appgw_ip
# NOTE: ths FAILS now, AppGW has unknown backend health, diagnostic test says it's a DNS error
- SEE: https://aka.ms/UnknownBackendHealth
- DIDN'T WORK: Add nsg, allow destination ports 65200-65535, associate to subnet_appgw
  - appgateway-01
Error
10.0.2.4
lemoncliff-55e177b6.northeurope.azurecontainerapps.io
Local Error: DNSResolution

###################################################################

# Create a private link in appgw to aca
- Private link configuration requires a unique subnet to provision IP addressing to enable use of private endpoint connections
- SEE: https://learn.microsoft.com/en-gb/azure/application-gateway/private-link-configure?WT.mc_id=Portal-Microsoft_Azure_HybridNetworking&tabs=portal

## Create private link subnet
az network vnet subnet create \
    --resource-group $rg \
    --vnet-name $vnet \
    --name $subnet_pep \
    --address-prefixes 10.0.4.0/24

  
- Tried creating manually: 
- SEE https://learn.microsoft.com/en-us/azure/container-apps/waf-app-gateway?tabs=default-domain#add-private-link-to-your-application-gateway

###################################################################
# Create a Windows VM to do tests on the network
az network vnet subnet create \
    --resource-group $rg \
    --vnet-name $vnet \
    --name $subnet_test \
    --address-prefixes 10.0.3.0/24

az vm create \
    --resource-group $rg \
    --location $location \
    --name $vm \
    --image Win2022Datacenter \
    --size Standard_D2ds_v6 \
    --admin-username $vm_username \
    --admin-password $vm_pwd \
    --vnet-name $vnet \
    --subnet $subnet_test

az vm auto-shutdown -g $rg -n $vm -l $location --time 1730 --email "pietronromano@live.com"

## Test connectivity directly to ACA
nslookup <aca_fqdn> # should resolve to private ip address of ACA ENV
curl https://<aca_fqdn>/request # should return standard response, NOTE: MUST be https

## Test connectivity through AppGW
curl <aappgw_ip>/request # ERROR: can't find it

###################################################################
